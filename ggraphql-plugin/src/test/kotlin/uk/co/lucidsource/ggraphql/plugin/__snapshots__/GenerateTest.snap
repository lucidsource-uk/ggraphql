uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/ChildNestedBabiesDataFetcher.kt]=[
package test.datafetchers

import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.collections.List
import test.models.BabyNested
import test.models.ChildNested
import test.resolvers.NodeResolver
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class ChildNestedBabiesDataFetcher(
  public val service: NodeResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<List<BabyNested?>?>> {
  override fun `get`(env: DataFetchingEnvironment): CompletableFuture<List<BabyNested?>?> =
      CompletableFuture.supplyAsync({ service.babies(childNested = env.getSource<ChildNested>(), )
      }, executor)
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/ParentNestedChildrenDataFetcher.kt]=[
package test.datafetchers

import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.collections.List
import test.models.ChildNested
import test.models.ParentNested
import test.resolvers.NodeResolver
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class ParentNestedChildrenDataFetcher(
  public val service: NodeResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<List<ChildNested?>?>> {
  override fun `get`(env: DataFetchingEnvironment): CompletableFuture<List<ChildNested?>?> =
      CompletableFuture.supplyAsync({ service.children(parentNested = env.getSource<ParentNested>(),
      ) }, executor)
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/ParentNestedPaginatedKidsDataFetcher.kt]=[
package test.datafetchers

import co.uk.somepackage.UnknownType
import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.Int
import test.models.ChildNested
import test.models.ParentNested
import test.resolvers.ParentNestedResolver
import uk.co.lucidsource.ggraphql.api.pagination.PaginatedResult
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class ParentNestedPaginatedKidsDataFetcher(
  public val service: ParentNestedResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<PaginatedResult<ChildNested, UnknownType>>> {
  override fun `get`(env: DataFetchingEnvironment):
      CompletableFuture<PaginatedResult<ChildNested, UnknownType>> {
    val pageSize = env.getArgument("pageSize") as Int? 
    val cursor = env.getArgument<Any>("cursor")?.let { deserializer.deserialize(it,
        UnknownType::class.java) } 
    return CompletableFuture.supplyAsync({ service.paginatedKids(parentNested =
        env.getSource<ParentNested>(), pageSize = pageSize, cursor = cursor) }, executor)
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/QueryAnotherOneMethodDataFetcher.kt]=[
package test.datafetchers

import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.String
import test.models.TestIto
import test.resolvers.QueryResolver
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class QueryAnotherOneMethodDataFetcher(
  public val service: QueryResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<String?>> {
  override fun `get`(env: DataFetchingEnvironment): CompletableFuture<String?> {
    val arg = env.getArgument<Any>("arg")?.let { deserializer.deserialize(it, TestIto::class.java) }
        
    return CompletableFuture.supplyAsync({ service.anotherOneMethod(arg = arg) }, executor)
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/QueryListDataFetcher.kt]=[
package test.datafetchers

import co.uk.somepackage.UnknownType
import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.Int
import test.models.TestDto
import test.models.TestDtoFilter
import test.resolvers.QueryResolver
import uk.co.lucidsource.ggraphql.api.pagination.PaginatedResult
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class QueryListDataFetcher(
  public val service: QueryResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<PaginatedResult<TestDto, UnknownType>>> {
  override fun `get`(env: DataFetchingEnvironment):
      CompletableFuture<PaginatedResult<TestDto, UnknownType>> {
    val where = env.getArgument<Any>("where")?.let { deserializer.deserialize(it,
        TestDtoFilter::class.java) } 
    val pageSize = env.getArgument("pageSize") as Int? 
    val cursor = env.getArgument<Any>("cursor")?.let { deserializer.deserialize(it,
        UnknownType::class.java) } 
    return CompletableFuture.supplyAsync({ service.list(where = where, pageSize = pageSize, cursor =
        cursor) }, executor)
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/QuerySomeMethodDataFetcher.kt]=[
package test.datafetchers

import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.String
import test.models.TestIto
import test.resolvers.QueryResolver
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class QuerySomeMethodDataFetcher(
  public val service: QueryResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<String?>> {
  override fun `get`(env: DataFetchingEnvironment): CompletableFuture<String?> {
    val arg = env.getArgument<Any>("arg")?.let { deserializer.deserialize(it, TestIto::class.java) }
        
    return CompletableFuture.supplyAsync({ service.someMethod(arg = arg!!) }, executor)
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/QueryStuffDataFetcher.kt]=[
package test.datafetchers

import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.collections.List
import test.models.Results
import test.resolvers.QueryResolver
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class QueryStuffDataFetcher(
  public val service: QueryResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<List<Results>>> {
  override fun `get`(env: DataFetchingEnvironment): CompletableFuture<List<Results>> =
      CompletableFuture.supplyAsync({ service.stuff() }, executor)
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/datafetchers/TestDtoResultsDataFetcher.kt]=[
package test.datafetchers

import co.uk.somepackage.UnknownType
import graphql.schema.DataFetcher
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Executor
import kotlin.Int
import test.models.Results
import test.models.TestDto
import test.resolvers.TestDtoResolver
import uk.co.lucidsource.ggraphql.api.pagination.PaginatedResult
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class TestDtoResultsDataFetcher(
  public val service: TestDtoResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) : DataFetcher<CompletableFuture<PaginatedResult<Results, UnknownType>>> {
  override fun `get`(env: DataFetchingEnvironment):
      CompletableFuture<PaginatedResult<Results, UnknownType>> {
    val pageSize = env.getArgument("pageSize") as Int? 
    val cursor = env.getArgument<Any>("cursor")?.let { deserializer.deserialize(it,
        UnknownType::class.java) } 
    return CompletableFuture.supplyAsync({ service.results(testDto = env.getSource<TestDto>(),
        pageSize = pageSize, cursor = cursor) }, executor)
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/BabyNested.kt]=[
package test.models

import kotlin.String

public data class BabyNested(
  public val id: String?,
  public val name: String?,
)

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/ChildNested.kt]=[
package test.models

import kotlin.String

public data class ChildNested(
  public val id: String?,
  public val name: String?,
)

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/IdentifiedEntity.kt]=[
package test.models

import kotlin.String

public interface IdentifiedEntity {
  public val id: String?
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/OtherDto.kt]=[
package test.models

import kotlin.String

public data class OtherDto(
  public val id: String?,
) : Results

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/ParentNested.kt]=[
package test.models

import kotlin.String

public data class ParentNested(
  public val id: String?,
  public val name: String?,
)

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/Results.kt]=[
package test.models

public interface Results

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/TestDto.kt]=[
package test.models

import java.util.Date
import kotlin.Int
import kotlin.String

public data class TestDto(
  override val id: String?,
  public val name: String,
  public val age: Int,
  public val createAt: Date?,
) : IdentifiedEntity, Results

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/TestDtoAgeFilterCriteria.kt]=[
package test.models

import kotlin.Int
import uk.co.lucidsource.ggraphql.api.filtering.FilterOperator
import uk.co.lucidsource.ggraphql.api.filtering.ast.Expression
import uk.co.lucidsource.ggraphql.api.filtering.ast.FilterUnaryExpression
import uk.co.lucidsource.ggraphql.api.filtering.expression.FilterExpression

public data class TestDtoAgeFilterCriteria(
  public val eq: Int? = null,
  public val gt: Int? = null,
  public val gtEq: Int? = null,
  public val lt: Int? = null,
  public val ltEq: Int? = null,
) : FilterExpression {
  override fun ast(): Expression {

                        if (`eq` != null) {
                            return FilterUnaryExpression(field = "age", operator =
        FilterOperator.EQ, value = `eq`)
                        }
                
                        if (`gt` != null) {
                            return FilterUnaryExpression(field = "age", operator =
        FilterOperator.GT, value = `gt`)
                        }
                
                        if (`gtEq` != null) {
                            return FilterUnaryExpression(field = "age", operator =
        FilterOperator.GT_EQ, value = `gtEq`)
                        }
                
                        if (`lt` != null) {
                            return FilterUnaryExpression(field = "age", operator =
        FilterOperator.LT, value = `lt`)
                        }
                
                        if (`ltEq` != null) {
                            return FilterUnaryExpression(field = "age", operator =
        FilterOperator.LT_EQ, value = `ltEq`)
                        }
                return Expression.EMPTY_EXPRESSION
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/TestDtoFilter.kt]=[
package test.models

import kotlin.collections.List
import uk.co.lucidsource.ggraphql.api.filtering.FilterGroupOperator
import uk.co.lucidsource.ggraphql.api.filtering.ast.Expression
import uk.co.lucidsource.ggraphql.api.filtering.ast.FilterGroupCompoundExpression
import uk.co.lucidsource.ggraphql.api.filtering.expression.FilterExpression

public data class TestDtoFilter(
  public val all: List<TestDtoFilterCriteria>? = null,
  public val not: List<TestDtoFilterCriteria>? = null,
  public val any: List<TestDtoFilterCriteria>? = null,
) : FilterExpression {
  override fun ast(): Expression {
    val all = FilterGroupCompoundExpression(FilterGroupOperator.ALL, all?.map { it.ast() }?.filter {
        it != Expression.EMPTY_EXPRESSION } ?: emptyList())
    val not = FilterGroupCompoundExpression(FilterGroupOperator.NOT, not?.map { it.ast() }?.filter {
        it != Expression.EMPTY_EXPRESSION } ?: emptyList())
    val any = FilterGroupCompoundExpression(FilterGroupOperator.ANY, any?.map { it.ast() }?.filter {
        it != Expression.EMPTY_EXPRESSION } ?: emptyList())

                  val filters = listOf(all,not,any).filter{ it.expressions.isNotEmpty() }
                  if(filters.isEmpty()) {
                      return Expression.EMPTY_EXPRESSION
                  }
                  return FilterGroupCompoundExpression(FilterGroupOperator.ALL, filters)
                
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/TestDtoFilterCriteria.kt]=[
package test.models

import uk.co.lucidsource.ggraphql.api.filtering.FilterGroupOperator
import uk.co.lucidsource.ggraphql.api.filtering.ast.Expression
import uk.co.lucidsource.ggraphql.api.filtering.ast.FilterGroupCompoundExpression
import uk.co.lucidsource.ggraphql.api.filtering.expression.FilterExpression

public data class TestDtoFilterCriteria(
  public val name: TestDtoNameFilterCriteria? = null,
  public val age: TestDtoAgeFilterCriteria? = null,
) : FilterExpression {
  override fun ast(): Expression {
    val fieldExpressions = listOf(name,age).filterNotNull().map { it.ast() }.filter { it !=
        Expression.EMPTY_EXPRESSION }
    if(fieldExpressions.isEmpty()) {
        return Expression.EMPTY_EXPRESSION
    }
    return FilterGroupCompoundExpression(FilterGroupOperator.ALL, fieldExpressions)
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/TestDtoNameFilterCriteria.kt]=[
package test.models

import kotlin.String
import uk.co.lucidsource.ggraphql.api.filtering.FilterOperator
import uk.co.lucidsource.ggraphql.api.filtering.ast.Expression
import uk.co.lucidsource.ggraphql.api.filtering.ast.FilterUnaryExpression
import uk.co.lucidsource.ggraphql.api.filtering.expression.FilterExpression

public data class TestDtoNameFilterCriteria(
  public val eq: String? = null,
) : FilterExpression {
  override fun ast(): Expression {

                        if (`eq` != null) {
                            return FilterUnaryExpression(field = "name", operator =
        FilterOperator.EQ, value = `eq`)
                        }
                return Expression.EMPTY_EXPRESSION
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/models/TestIto.kt]=[
package test.models

import kotlin.String

public data class TestIto(
  public val name: String? = null,
)

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/resolvers/GraphQLCodeDataFetcherRegistry.kt]=[
package test.resolvers

import graphql.schema.FieldCoordinates
import graphql.schema.GraphQLCodeRegistry
import java.util.concurrent.Executor
import test.datafetchers.ChildNestedBabiesDataFetcher
import test.datafetchers.ParentNestedChildrenDataFetcher
import test.datafetchers.ParentNestedPaginatedKidsDataFetcher
import test.datafetchers.QueryAnotherOneMethodDataFetcher
import test.datafetchers.QueryListDataFetcher
import test.datafetchers.QuerySomeMethodDataFetcher
import test.datafetchers.QueryStuffDataFetcher
import test.datafetchers.TestDtoResultsDataFetcher
import uk.co.lucidsource.ggraphql.api.serde.Deserializer

public class GraphQLCodeDataFetcherRegistry(
  public val nodeResolver: NodeResolver,
  public val parentNestedResolver: ParentNestedResolver,
  public val queryResolver: QueryResolver,
  public val testDtoResolver: TestDtoResolver,
  public val deserializer: Deserializer,
  public val executor: Executor,
) {
  public fun registerResolvers(graphQLCodeRegistry: GraphQLCodeRegistry.Builder):
      GraphQLCodeRegistry.Builder {
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("ChildNested", "babies"),
        ChildNestedBabiesDataFetcher(nodeResolver, deserializer, executor))
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("ParentNested", "children"),
        ParentNestedChildrenDataFetcher(nodeResolver, deserializer, executor))
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("ParentNested", "paginatedKids"),
        ParentNestedPaginatedKidsDataFetcher(parentNestedResolver, deserializer, executor))
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("Query", "stuff"),
        QueryStuffDataFetcher(queryResolver, deserializer, executor))
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("Query", "someMethod"),
        QuerySomeMethodDataFetcher(queryResolver, deserializer, executor))
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("Query", "anotherOneMethod"),
        QueryAnotherOneMethodDataFetcher(queryResolver, deserializer, executor))
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("Query", "list"),
        QueryListDataFetcher(queryResolver, deserializer, executor))
    graphQLCodeRegistry.dataFetcher(FieldCoordinates.coordinates("TestDto", "results"),
        TestDtoResultsDataFetcher(testDtoResolver, deserializer, executor))
    return graphQLCodeRegistry
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/resolvers/NodeResolver.kt]=[
package test.resolvers

import kotlin.collections.List
import test.models.BabyNested
import test.models.ChildNested
import test.models.ParentNested

public interface NodeResolver {
  public fun babies(childNested: ChildNested): List<BabyNested?>?

  public fun children(parentNested: ParentNested): List<ChildNested?>?
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/resolvers/ParentNestedResolver.kt]=[
package test.resolvers

import co.uk.somepackage.UnknownType
import kotlin.Int
import test.models.ChildNested
import test.models.ParentNested
import uk.co.lucidsource.ggraphql.api.pagination.PaginatedResult

public interface ParentNestedResolver {
  public fun paginatedKids(
    pageSize: Int?,
    cursor: UnknownType?,
    parentNested: ParentNested,
  ): PaginatedResult<ChildNested, UnknownType>
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/resolvers/QueryResolver.kt]=[
package test.resolvers

import co.uk.somepackage.UnknownType
import kotlin.Int
import kotlin.String
import kotlin.collections.List
import test.models.Results
import test.models.TestDto
import test.models.TestDtoFilter
import test.models.TestIto
import uk.co.lucidsource.ggraphql.api.pagination.PaginatedResult

public interface QueryResolver {
  public fun stuff(): List<Results>

  public fun someMethod(arg: TestIto): String?

  public fun anotherOneMethod(arg: TestIto?): String?

  public fun list(
    `where`: TestDtoFilter?,
    pageSize: Int?,
    cursor: UnknownType?,
  ): PaginatedResult<TestDto, UnknownType>
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/resolvers/TestDtoResolver.kt]=[
package test.resolvers

import co.uk.somepackage.UnknownType
import kotlin.Int
import test.models.Results
import test.models.TestDto
import uk.co.lucidsource.ggraphql.api.pagination.PaginatedResult

public interface TestDtoResolver {
  public fun results(
    pageSize: Int?,
    cursor: UnknownType?,
    testDto: TestDto,
  ): PaginatedResult<Results, UnknownType>
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/wiring/IdentifiedEntityTypeResolver.kt]=[
package test.wiring

import graphql.TypeResolutionEnvironment
import graphql.schema.GraphQLObjectType
import graphql.schema.TypeResolver
import java.lang.IllegalArgumentException
import test.models.TestDto

public class IdentifiedEntityTypeResolver : TypeResolver {
  override fun getType(env: TypeResolutionEnvironment): GraphQLObjectType {

                val javaObject = env.getObject<Any>()
                return when(javaObject) {
            is TestDto -> env.getSchema().getObjectType("TestDto")
    else -> throw IllegalArgumentException("Unexpected type in type resolver ${javaObject}")
    }
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/wiring/ResultsTypeResolver.kt]=[
package test.wiring

import graphql.TypeResolutionEnvironment
import graphql.schema.GraphQLObjectType
import graphql.schema.TypeResolver
import java.lang.IllegalArgumentException
import test.models.OtherDto
import test.models.TestDto

public class ResultsTypeResolver : TypeResolver {
  override fun getType(env: TypeResolutionEnvironment): GraphQLObjectType {

                val javaObject = env.getObject<Any>()
                return when(javaObject) {
            is TestDto -> env.getSchema().getObjectType("TestDto")
    is OtherDto -> env.getSchema().getObjectType("OtherDto")
    else -> throw IllegalArgumentException("Unexpected type in type resolver ${javaObject}")
    }
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[/test/wiring/TypeResolverWiring.kt]=[
package test.wiring

import graphql.schema.idl.RuntimeWiring
import graphql.schema.idl.TypeRuntimeWiring

public object TypeResolverWiring {
  public fun wireTypeResolvers(wiring: RuntimeWiring.Builder): RuntimeWiring.Builder {

                wiring.type(
                    TypeRuntimeWiring.newTypeWiring("Results")
                        .typeResolver(test.wiring.ResultsTypeResolver()).build()
                )
                
                wiring.type(
                    TypeRuntimeWiring.newTypeWiring("IdentifiedEntity")
                        .typeResolver(test.wiring.IdentifiedEntityTypeResolver()).build()
                )
                return wiring
  }
}

]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[generated-files]=[
/test/datafetchers/QueryAnotherOneMethodDataFetcher.kt,/test/datafetchers/ParentNestedChildrenDataFetcher.kt,/test/datafetchers/QueryStuffDataFetcher.kt,/test/datafetchers/QuerySomeMethodDataFetcher.kt,/test/datafetchers/ChildNestedBabiesDataFetcher.kt,/test/datafetchers/ParentNestedPaginatedKidsDataFetcher.kt,/test/datafetchers/TestDtoResultsDataFetcher.kt,/test/datafetchers/QueryListDataFetcher.kt,/test/wiring/IdentifiedEntityTypeResolver.kt,/test/wiring/ResultsTypeResolver.kt,/test/wiring/TypeResolverWiring.kt,/test/resolvers/QueryResolver.kt,/test/resolvers/GraphQLCodeDataFetcherRegistry.kt,/test/resolvers/NodeResolver.kt,/test/resolvers/ParentNestedResolver.kt,/test/resolvers/TestDtoResolver.kt,/test/models/IdentifiedEntity.kt,/test/models/BabyNested.kt,/test/models/ChildNested.kt,/test/models/OtherDto.kt,/test/models/TestDtoFilterCriteria.kt,/test/models/Results.kt,/test/models/ParentNested.kt,/test/models/TestDtoFilter.kt,/test/models/TestDto.kt,/test/models/TestIto.kt,/test/models/TestDtoAgeFilterCriteria.kt,/test/models/TestDtoNameFilterCriteria.kt
]


uk.co.lucidsource.ggraphql.plugin.GenerateTest.testGenerate[schema.graphql]=[
interface IdentifiedEntity {
  id: String
}

union Results = OtherDto | TestDto

type BabyNested {
  id: String
  name: String
}

type ChildNested {
  babies: [BabyNested]
  id: String
  name: String
}

type ChildNestedPaginatedResult {
  nextCursor: PaginationCursor
  nodes: [ChildNested]
  pageNumber: Int!
  previousCursor: PaginationCursor
  total: Int!
}

type OtherDto {
  id: String
}

type ParentNested {
  children: [ChildNested]
  id: String
  name: String
  paginatedKids(cursor: PaginationCursor, pageSize: Int = 10): ChildNestedPaginatedResult!
}

type Query {
  anotherOneMethod(arg: TestIto): String
  list(cursor: PaginationCursor, pageSize: Int = 10, where: TestDtoFilter): TestDtoPaginatedResult!
  someMethod(arg: TestIto!): String
  stuff: [Results!]!
}

type ResultsPaginatedResult {
  nextCursor: PaginationCursor
  nodes: [Results!]!
  pageNumber: Int!
  previousCursor: PaginationCursor
  total: Int!
}

type TestDto implements IdentifiedEntity {
  age: Int!
  createAt: DateTime
  id: String
  name: String!
  results(cursor: PaginationCursor, pageSize: Int = 10): ResultsPaginatedResult!
}

type TestDtoPaginatedResult {
  nextCursor: PaginationCursor
  nodes: [TestDto!]!
  pageNumber: Int!
  previousCursor: PaginationCursor
  total: Int!
}

enum FilterOperator {
  EQ
  GT
  GT_EQ
  IN
  LIKE
  LT
  LT_EQ
}

scalar DateTime

scalar PaginationCursor

input TestDtoAgeFilterCriteria {
  eq: Int
  gt: Int
  gtEq: Int
  lt: Int
  ltEq: Int
}

input TestDtoFilter {
  all: [TestDtoFilterCriteria!]
  any: [TestDtoFilterCriteria!]
  not: [TestDtoFilterCriteria!]
}

input TestDtoFilterCriteria {
  age: TestDtoAgeFilterCriteria
  name: TestDtoNameFilterCriteria
}

input TestDtoNameFilterCriteria {
  eq: String
}

input TestIto {
  name: String
}

]
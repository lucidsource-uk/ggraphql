scalar DateTime @type(type: "java.util.Date")
scalar PaginationCursor @type(type: "co.uk.somepackage.UnknownType")

union Results = TestDto | OtherDto

type User {
    id: ID
    name: String
}

type BabyNested {
    id: ID
    name: String
    createdBy: User! @batchLoader @resolver(name: "UserResolver")
    updatedBy: User @batchLoader @resolver(name: "UserResolver")
}

type ChildNested {
    id: ID
    name: String
    babies: [BabyNested] @resolver(name: "NodeResolver")
    babiesReq: [BabyNested!]! @resolver(name: "NodeResolver")
}

type ParentNested {
    id: ID
    name: String
    children: [ChildNested] @resolver(name: "NodeResolver")
    paginatedKids: [ChildNested] @paginated
}

input TestIto {
    name: String
}

type Query {
    list: [TestDto!]! @filtered @paginated
    stuff: [Results!]!
    someMethod(arg: TestIto!): String
    anotherOneMethod(arg: TestIto): String
}

type TestDto implements IdentifiedEntity {
    id: ID
    name: String! @filter(operators: [EQ])
    age: Int! @filter(operators: [EQ, GT, GT_EQ, LT, LT_EQ])
    results: [Results!]! @paginated
    createAt: DateTime
}

type OtherDto {
    id: ID
}

interface IdentifiedEntity {
    id: ID
}